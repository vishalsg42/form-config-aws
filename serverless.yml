service: form-config-aws
frameworkVersion: "2 || 3"
variablesResolutionMode: 20210326
plugins:
  - serverless-iam-roles-per-function
provider:
  name: aws
  runtime: nodejs14.x
  profile: mint
  lambdaHashingVersion: "20201221"
  # iam:
  #   role:
  #     name: store-config-${sls:stage}-role
  #     statements:
  #       - Effect: "Allow"
  #         Action:
  #           - "s3:*"
  #           - "s3-object-lambda:*"
  #         Resource:
  #           - !Join ["", ["arn:aws:s3:::", Ref: StoreConfigBucket]]
  #           - !Join ["", ["arn:aws:s3:::", Ref: StoreConfigBucket, "/*"]]

functions:
  hello:
    handler: src/index.handler
    name: store-api-lambda
    timeout: 28
    memorySize: 512
    # iamRoleStatementsName: store-config-${sls:stage}-role
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - "s3:*"
          - "s3-object-lambda:*"
        Resource:   "*"
          # - !Join ["", ["arn:aws:s3:::", Ref: StoreConfigBucket]]
          # - !Join ["", ["arn:aws:s3:::", Ref: StoreConfigBucket, "/*"]]
    environment:
      STORE_BUCKET_NAME: !Ref StoreConfigBucket
    events:
      - http:
          path: /store
          method: post
      - http:
          path: /store
          method: put

resources:
  Resources:
    StoreConfigBucket:
      Type: "AWS::S3::Bucket"
      Properties:
        BucketName: store-config-hash-${sls:stage}
    S3BucketPolicy:
      Type: "AWS::S3::BucketPolicy"
      Properties:
        Bucket: !Ref StoreConfigBucket
        PolicyDocument:
          Statement:
            - Action:
                - "s3:GetObject"
                - "s3:PutObject"
              Effect: Allow
              Resource:
                - !Sub arn:aws:s3:::${StoreConfigBucket}
                - !Sub arn:aws:s3:::${StoreConfigBucket}/*
              Principal:
                AWS:
                  - "*"
  Outputs:
    StoreConfigBucketName:
      Value: !Ref StoreConfigBucket
      Export:
        Name: StoreConfigBucketName
